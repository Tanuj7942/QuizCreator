/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/MDIApplication.java to edit this template
 */
package com.mycompany.quizcreator;

import com.mycompany.quizcreator.beans.Question;
import com.mycompany.quizcreator.questiondatabase.QuestionDatabase;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.attribute.BasicFileAttributes;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author 23379
 */
public class AdminPanel extends javax.swing.JFrame {

    /**
     * Creates new form AdminPanel1
     */
    public AdminPanel() {
        initComponents();
    }
    BufferedWriter outputUnprocessedData = null;
    private static final Logger LOG = LogManager.getLogger(AdminPanel.class);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileBrowser = new javax.swing.JFileChooser();
        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        questionMenu = new javax.swing.JMenu();
        addMenuItem = new javax.swing.JMenuItem();
        searchMenuItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        closeBtn = new javax.swing.JMenuItem();
        uploadMenu = new javax.swing.JMenu();
        uploadCSV = new javax.swing.JMenuItem();
        uploadJSON = new javax.swing.JMenuItem();
        testSettings = new javax.swing.JMenu();
        settingsButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        questionMenu.setMnemonic('f');
        questionMenu.setText("QUESTION");
        questionMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        addMenuItem.setMnemonic('o');
        addMenuItem.setText("ADD");
        addMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuItemActionPerformed(evt);
            }
        });
        questionMenu.add(addMenuItem);

        searchMenuItem.setMnemonic('s');
        searchMenuItem.setText("SEARCH");
        searchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMenuItemActionPerformed(evt);
            }
        });
        questionMenu.add(searchMenuItem);

        editMenuItem.setMnemonic('a');
        editMenuItem.setText("EDIT");
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemActionPerformed(evt);
            }
        });
        questionMenu.add(editMenuItem);

        deleteMenuItem.setMnemonic('x');
        deleteMenuItem.setText("DELETE");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        questionMenu.add(deleteMenuItem);

        closeBtn.setText("CLOSE");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        questionMenu.add(closeBtn);

        menuBar.add(questionMenu);

        uploadMenu.setText("UPLOAD");
        uploadMenu.setToolTipText("");
        uploadMenu.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        uploadCSV.setText("Upload CSV File");
        uploadCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadCSVActionPerformed(evt);
            }
        });
        uploadMenu.add(uploadCSV);

        uploadJSON.setText("Upload JSON File");
        uploadJSON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadJSONActionPerformed(evt);
            }
        });
        uploadMenu.add(uploadJSON);

        menuBar.add(uploadMenu);

        testSettings.setText("TEST");
        testSettings.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        settingsButton.setText("Settings");
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        testSettings.add(settingsButton);

        menuBar.add(testSettings);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1068, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 699, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        SearchQuestion search = new SearchQuestion();
        desktopPane.add(search);
        search.setSize(desktopPane.getWidth(), desktopPane.getHeight());
        search.setVisible(true);
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void addMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuItemActionPerformed
        // TODO add your handling code here:
        AddQuestions add = new AddQuestions();
        desktopPane.add(add);
        add.setSize(desktopPane.getWidth(), desktopPane.getHeight());
        add.setVisible(true);
    }//GEN-LAST:event_addMenuItemActionPerformed

    private void searchMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMenuItemActionPerformed
        // TODO add your handling code here:
        SearchQuestion search = new SearchQuestion();
        desktopPane.add(search);
        search.setSize(desktopPane.getWidth(), desktopPane.getHeight());
        search.setVisible(true);
    }//GEN-LAST:event_searchMenuItemActionPerformed

    private void uploadCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadCSVActionPerformed
        // TODO add your handling code here:
        int selectedValue = fileBrowser.showOpenDialog(this);
        fileBrowser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        String csvData;
        String[] data;
        int status = 0;
        if (selectedValue == JFileChooser.APPROVE_OPTION && fileBrowser.getSelectedFile().getName().toLowerCase().endsWith(".csv")) {
            try {
                File csvSelectedFile = fileBrowser.getSelectedFile();
                BufferedReader file = new BufferedReader(new FileReader(fileBrowser.getSelectedFile()));
                while ((csvData = file.readLine()) != null) {
                    data = csvData.split(",");

                    Question question = new Question();
                    QuestionDatabase database = new QuestionDatabase();
                    question.setQuestionID(Integer.parseInt(data[0]));
                    question.setQuestion(data[1]);
                    question.setFirstOption(data[2]);
                    question.setSecondOption(data[3]);
                    question.setThirdOption(data[4]);
                    question.setFourthOption(data[5]);
                    question.setCorrectOption(data[6]);

                    try {
                        database.addQuestion(question);
                    } catch (SQLIntegrityConstraintViolationException ex) {
                        LOG.error(ex + "\n");
                        status++;
                        if (status == 1) {
                            outputUnprocessedData = new BufferedWriter(new FileWriter(csvSelectedFile.getAbsolutePath().replace("\\" + csvSelectedFile.getName(), "") + "//Unprocessed " + csvSelectedFile.getName() + ".csv", true));
                        }
                        outputUnprocessedData.write(question.getQuestionID()
                                + "," + question.getQuestion()
                                + "," + question.getFirstOption()
                                + "," + question.getSecondOption()
                                + "," + question.getThirdOption()
                                + "," + question.getFourthOption()
                                + "," + question.getCorrectOption()
                                + "," + ex + "\n");
                    }
                }
                if (status > 0) {
                    JOptionPane.showMessageDialog(this, csvSelectedFile.getAbsolutePath(), "Unprocessed Data", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "All questions successfully added!!", "Questions Added", JOptionPane.INFORMATION_MESSAGE);
                }
                outputUnprocessedData.close();
            } catch (IOException ex) {
                LOG.error(ex + "\n");
            }
        } else if (selectedValue == JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(this, "Selected file is not CSV !!", "Wrong File", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uploadCSVActionPerformed

    private void uploadJSONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadJSONActionPerformed
        // TODO add your handling code here:
        fileBrowser.setCurrentDirectory(new File("C:/Users/23379.DESKTOP-CL7RQ2N/Downloads"));
        int selectedValue = fileBrowser.showOpenDialog(this);
        fileBrowser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int status = 0;
        if (selectedValue == JFileChooser.APPROVE_OPTION && fileBrowser.getSelectedFile().getName().toLowerCase().endsWith(".json")) {
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = null;
            try {
                File jsonSelectedFile = fileBrowser.getSelectedFile();
                Object obj = parser.parse(new FileReader(fileBrowser.getSelectedFile()));
                JSONArray jsonArray = (JSONArray) obj;
                for (int i = 0; i < jsonArray.size(); i++) {
                    jsonObject = (JSONObject) jsonArray.get(i);
                    Question question = new Question();
                    QuestionDatabase database = new QuestionDatabase();

                    question.setQuestionID(((Long) jsonObject.get("Question ID")).intValue());
                    question.setQuestion((String) jsonObject.get("Question"));
                    question.setFirstOption((String) jsonObject.get("First Option"));
                    question.setSecondOption((String) jsonObject.get("Second option"));
                    question.setThirdOption((String) jsonObject.get("Third Option"));
                    question.setFourthOption((String) jsonObject.get("Fourth Option"));
                    question.setCorrectOption((String) jsonObject.get("Correct Option"));

                    try {
                        database.addQuestion(question);
                    } catch (SQLIntegrityConstraintViolationException ex) {
                        LOG.error(ex + "\n");
                        status++;
                        if (status == 1) {
                            outputUnprocessedData = new BufferedWriter(new FileWriter(jsonSelectedFile.getAbsolutePath().replace("\\" + jsonSelectedFile.getName(), "") + "//Unprocessed " + jsonSelectedFile.getName().replace(".json", "") + ".csv", true));
                        }
                        outputUnprocessedData.write(question.getQuestionID()
                                + "," + question.getQuestion()
                                + "," + question.getFirstOption()
                                + "," + question.getSecondOption()
                                + "," + question.getThirdOption()
                                + "," + question.getFourthOption()
                                + "," + question.getCorrectOption()
                                + "," + ex + "\n");
                    }
                }
                outputUnprocessedData.close();
                if (status > 0) {
                    JOptionPane.showMessageDialog(this, jsonSelectedFile.getAbsolutePath(), "Unprocessed Data", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "All questions successfully added!!", "Questions Added", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (FileNotFoundException ex) {
                LOG.error(ex + "\n");
            } catch (IOException ex) {
                LOG.error(ex + "\n");
            } catch (ParseException ex) {
                LOG.error(ex + "\n");
            }
        } else if (selectedValue == JFileChooser.APPROVE_OPTION) {
            JOptionPane.showMessageDialog(this, "Selected file is not JSON!!", "Wrong File", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uploadJSONActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(this, "Do you really want to close the admin panel ?", "Exit Message", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            MainScreen main = new MainScreen();
            main.setLocationRelativeTo(this);
            this.dispose();
            main.setVisible(true);
        }
    }//GEN-LAST:event_closeBtnActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        // TODO add your handling code here:
        SettingsPanel settings = new SettingsPanel(new QuestionDatabase().getQuestions(null).size());
        desktopPane.add(settings);
        settings.setSize(desktopPane.getWidth(), desktopPane.getHeight());
        settings.setVisible(true);
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void editMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemActionPerformed
        // TODO add your handling code here:
        SearchQuestion search = new SearchQuestion();
        desktopPane.add(search);
        search.setSize(desktopPane.getWidth(), desktopPane.getHeight());
        search.setVisible(true);
    }//GEN-LAST:event_editMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addMenuItem;
    private javax.swing.JMenuItem closeBtn;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JFileChooser fileBrowser;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu questionMenu;
    private javax.swing.JMenuItem searchMenuItem;
    private javax.swing.JMenuItem settingsButton;
    private javax.swing.JMenu testSettings;
    private javax.swing.JMenuItem uploadCSV;
    private javax.swing.JMenuItem uploadJSON;
    private javax.swing.JMenu uploadMenu;
    // End of variables declaration//GEN-END:variables

}
