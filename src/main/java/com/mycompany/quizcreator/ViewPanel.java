/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.quizcreator;

import com.mycompany.quizcreator.beans.Question;
import com.mycompany.quizcreator.questiondatabase.QuestionDatabase;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 23379
 */
public class ViewPanel extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewQuestion
     */
    public ViewPanel() {
        initComponents();
    }
    DefaultTableModel model = null;

    public ViewPanel(JTable dataTable, JButton deleteBtn, JButton editBtn, JScrollPane jScrollPane1, JButton viewBtn) {
        this.dataTable = dataTable;
        this.deleteBtn = deleteBtn;
        this.editBtn = editBtn;
        this.jScrollPane1 = jScrollPane1;
        this.viewBtn = viewBtn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        viewBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        dataTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Question ID", "Question", "First Option", "Second Option", "Third Option", "Fourth Option", "Correct Option"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.setDragEnabled(true);
        dataTable.setRowHeight(35);
        dataTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setResizable(false);
            dataTable.getColumnModel().getColumn(1).setResizable(false);
            dataTable.getColumnModel().getColumn(2).setResizable(false);
            dataTable.getColumnModel().getColumn(3).setResizable(false);
            dataTable.getColumnModel().getColumn(4).setResizable(false);
            dataTable.getColumnModel().getColumn(5).setResizable(false);
            dataTable.getColumnModel().getColumn(6).setResizable(false);
        }

        viewBtn.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        viewBtn.setText("VIEW");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 474, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewBtn)
                    .addComponent(editBtn)
                    .addComponent(deleteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        if (dataTable.getSelectedRowCount() == 1) {
            QuestionDatabase database = new QuestionDatabase();
            Question selectedQuestion = new Question();
            selectedQuestion.setQuestionID((int) dataTable.getValueAt(dataTable.getSelectedRow(), 0));

            List<Question> retrievedQuestion = database.getQuestions(selectedQuestion);

            Question questionData = new Question();
            questionData.setQuestionID(retrievedQuestion.get(0).getQuestionID());
            questionData.setQuestion(retrievedQuestion.get(0).getQuestion());
            questionData.setFirstOption(retrievedQuestion.get(0).getFirstOption());
            questionData.setSecondOption(retrievedQuestion.get(0).getSecondOption());
            questionData.setThirdOption(retrievedQuestion.get(0).getThirdOption());
            questionData.setFourthOption(retrievedQuestion.get(0).getFourthOption());
            questionData.setCorrectOption(retrievedQuestion.get(0).getCorrectOption());

            EditQuestion editData = new EditQuestion(questionData);
            editData.setSize(this.getWidth(), this.getHeight());
            getParent().add(editData);
            editData.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Only one row allowed !!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        if (dataTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No Rows selected!!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            int[] selectedQuestions = dataTable.getSelectedRows();
            List<Integer> listOfIDs = new ArrayList<Integer>();
            for (int i = 0; i < dataTable.getSelectedRowCount(); i++) {
                listOfIDs.add((int) dataTable.getValueAt(selectedQuestions[i], 0));
            }
            QuestionDatabase database = new QuestionDatabase();
            int returnValue = JOptionPane.showConfirmDialog(this, "Do you really want to delete the questions?", "Confirmation Message", JOptionPane.YES_NO_OPTION);
            if (returnValue == JOptionPane.YES_OPTION) {
                if (database.deleteQuestions(listOfIDs)) {
                    model.setRowCount(0);
                    addDataRow(database.getQuestions(new Question()));
                    JOptionPane.showMessageDialog(this, "Question Successfully Deleted!!", "Confirmation Message", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        int selectedID;
        int[] selectedIDs = dataTable.getSelectedRows();
        if (dataTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No data available to show!", "NO DATA", JOptionPane.ERROR_MESSAGE);
        } else if (dataTable.getSelectedRowCount() == 1) {
            selectedID = (int) dataTable.getValueAt(dataTable.getSelectedRow(), 0);
            viewQuestion(selectedID);
        } else if (dataTable.getSelectedRowCount() == 0) {
            selectedID = (int) dataTable.getValueAt(0, 0);
            viewQuestion(selectedID);
        } else {
            selectedID = (int) dataTable.getValueAt(selectedIDs[0], 0);
            viewQuestion(selectedID);
        }
    }//GEN-LAST:event_viewBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dataTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables

    public void addDataRow(List<Question> searchedQuestions) {
        model = (DefaultTableModel) dataTable.getModel();
        for (int i = 0; i < searchedQuestions.size(); i++) {
            Object[] dataRow = {searchedQuestions.get(i).getQuestionID(),
                searchedQuestions.get(i).getQuestion(),
                searchedQuestions.get(i).getFirstOption(),
                searchedQuestions.get(i).getSecondOption(),
                searchedQuestions.get(i).getThirdOption(),
                searchedQuestions.get(i).getFourthOption(),
                searchedQuestions.get(i).getCorrectOption()};
            model.addRow(dataRow);
        }
        dataTable.setModel(model);
    }

    private void viewQuestion(int selectedID) {
        ViewQuestion questionViewer = new ViewQuestion(selectedID);
        questionViewer.setSize(this.getWidth(), this.getHeight());
        getParent().add(questionViewer);
        questionViewer.setVisible(true);
    }
}
